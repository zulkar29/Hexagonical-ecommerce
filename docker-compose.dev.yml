services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ecommerce-postgres-dev
    restart: unless-stopped
    environment:
      POSTGRES_DB: ecommerce_saas_dev
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - ecommerce-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: ecommerce-redis-dev
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - ecommerce-network

  # Backend API (Go Fiber)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: ecommerce-backend-dev
    restart: unless-stopped
    ports:
      - "8080:8080"
    volumes:
      - ./backend:/app
      - /app/bin # Exclude binary from volume mount
    environment:
      - ENVIRONMENT=development
      - PORT=8080
      - DATABASE_URL=postgres://postgres:postgres123@postgres:5432/ecommerce_saas_dev?sslmode=disable
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=dev-jwt-secret-key
    depends_on:
      - postgres
      - redis
    networks:
      - ecommerce-network
    # Enable hot reload for development
    command: air -c .air.toml

  # Storefront (Next.js)
  storefront:
    build:
      context: ./storefront
      dockerfile: Dockerfile.dev
    container_name: ecommerce-storefront-dev
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - ./storefront:/app
      - /app/node_modules
      - /app/.next
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:8080/api/v1
      - NEXT_PUBLIC_APP_URL=http://localhost:3000
    depends_on:
      - backend
    networks:
      - ecommerce-network

  # Dashboard (React.js)
  dashboard:
    build:
      context: ./dashboard
      dockerfile: Dockerfile.dev
    container_name: ecommerce-dashboard-dev
    restart: unless-stopped
    ports:
      - "3001:3001"
    volumes:
      - ./dashboard:/app
      - /app/node_modules
      - /app/build
    environment:
      - NODE_ENV=development
      - REACT_APP_API_URL=http://localhost:8080/api/v1
      - PORT=3001
    depends_on:
      - backend
    networks:
      - ecommerce-network

  # MinIO (S3-compatible storage for development)
  minio:
    image: minio/minio:latest
    container_name: ecommerce-minio-dev
    restart: unless-stopped
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    command: server /data --console-address ":9001"
    networks:
      - ecommerce-network

  # MailHog (Email testing)
  mailhog:
    image: mailhog/mailhog:latest
    container_name: ecommerce-mailhog-dev
    restart: unless-stopped
    ports:
      - "1025:1025" # SMTP
      - "8025:8025" # Web UI
    networks:
      - ecommerce-network

volumes:
  postgres_data:
  redis_data:
  minio_data:

networks:
  ecommerce-network:
    driver: bridge