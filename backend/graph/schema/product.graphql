# Product management schema for e-commerce platform

type Product {
  id: ID!
  tenantId: ID!
  name: String!
  description: String
  sku: String!
  price: Money!
  comparePrice: Money
  status: ProductStatus!
  inventory: ProductInventory!
  images: [ProductImage!]!
  variants: [ProductVariant!]!
  categories: [Category!]!
  tags: [String!]!
  seo: ProductSEO!
  createdAt: DateTime!
  updatedAt: DateTime!
  
  # Computed fields
  isInStock: Boolean!
  totalSales: Int!
  conversionRate: Float!
  profitMargin: Float!
}

type ProductInventory {
  trackQuantity: Boolean!
  quantity: Int!
  reservedQuantity: Int!
  availableQuantity: Int! # Computed
  lowStockAlert: Int!
  allowBackorder: Boolean!
}

type ProductImage {
  id: ID!
  url: String!
  altText: String
  position: Int!
  width: Int
  height: Int
}

type ProductVariant {
  id: ID!
  title: String!
  sku: String!
  price: Money
  inventory: ProductInventory!
  options: [VariantOption!]!
}

type VariantOption {
  name: String!
  value: String!
}

type Category {
  id: ID!
  name: String!
  slug: String!
  description: String
  parentId: ID
  children: [Category!]!
  productCount: Int!
  isActive: Boolean!
}

type ProductSEO {
  title: String
  description: String
  keywords: [String!]!
}

enum ProductStatus {
  DRAFT
  ACTIVE
  ARCHIVED
  OUT_OF_STOCK
}

# Connection types for pagination
type ProductConnection {
  edges: [ProductEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type ProductEdge {
  node: Product!
  cursor: String!
}

# Input types
input ProductFilter {
  status: [ProductStatus!]
  categories: [ID!]
  priceRange: PriceRange
  inStock: Boolean
  hasVariants: Boolean
  tags: [String!]
  createdAfter: DateTime
  createdBefore: DateTime
}

input PriceRange {
  min: Money
  max: Money
}

input ProductSort {
  field: ProductSortField!
  direction: SortDirection!
}

enum ProductSortField {
  NAME
  PRICE
  CREATED_AT
  UPDATED_AT
  TOTAL_SALES
  INVENTORY
}

enum SortDirection {
  ASC
  DESC
}

# Mutation inputs
input CreateProductInput {
  name: String! @validate(constraint: "required,min=1,max=255")
  description: String
  sku: String! @validate(constraint: "required,min=1,max=100")
  price: Money! @validate(constraint: "required,min=0")
  comparePrice: Money
  status: ProductStatus!
  inventory: ProductInventoryInput!
  images: [ProductImageInput!]
  variants: [ProductVariantInput!]
  categories: [ID!]
  tags: [String!]
  seo: ProductSEOInput
}

input UpdateProductInput {
  name: String @validate(constraint: "min=1,max=255")
  description: String
  sku: String @validate(constraint: "min=1,max=100")
  price: Money @validate(constraint: "min=0")
  comparePrice: Money
  status: ProductStatus
  inventory: ProductInventoryInput
  images: [ProductImageInput!]
  variants: [ProductVariantInput!]
  categories: [ID!]
  tags: [String!]
  seo: ProductSEOInput
}

input ProductInventoryInput {
  trackQuantity: Boolean!
  quantity: Int!
  lowStockAlert: Int!
  allowBackorder: Boolean!
}

input ProductImageInput {
  id: ID
  url: String!
  altText: String
  position: Int!
  width: Int
  height: Int
}

input ProductVariantInput {
  id: ID
  title: String!
  sku: String!
  price: Money
  inventory: ProductInventoryInput!
  options: [VariantOptionInput!]!
}

input VariantOptionInput {
  name: String!
  value: String!
}

input ProductSEOInput {
  title: String
  description: String
  keywords: [String!]
}

# Bulk operations
input BulkProductUpdates {
  status: ProductStatus
  categories: [ID!]
  tags: [String!]
  priceAdjustment: PriceAdjustmentInput
}

input PriceAdjustmentInput {
  type: PriceAdjustmentType!
  value: Float!
}

enum PriceAdjustmentType {
  PERCENTAGE
  FIXED_AMOUNT
}

input ImportMapping {
  nameColumn: String!
  skuColumn: String!
  priceColumn: String!
  descriptionColumn: String
  categoryColumn: String
  inventoryColumn: String
}

input InventoryAdjustment {
  type: InventoryAdjustmentType!
  quantity: Int!
  reason: String!
}

enum InventoryAdjustmentType {
  INCREASE
  DECREASE
  SET
}

# Result types
type CreateProductResult {
  success: Boolean!
  product: Product
  errors: [ValidationError!]!
}

type UpdateProductResult {
  success: Boolean!
  product: Product
  errors: [ValidationError!]!
}

type DeleteProductResult {
  success: Boolean!
  deletedId: ID
  errors: [ValidationError!]!
}

type BulkUpdateResult {
  success: Boolean!
  updatedCount: Int!
  errors: [ValidationError!]!
}

type ImportResult {
  success: Boolean!
  importedCount: Int!
  errors: [ValidationError!]!
  failedRows: [ImportError!]!
}

type ImportError {
  row: Int!
  field: String!
  message: String!
}

type InventoryAdjustmentResult {
  success: Boolean!
  product: Product
  oldQuantity: Int!
  newQuantity: Int!
  errors: [ValidationError!]!
}

type ValidationError {
  field: String!
  message: String!
  code: String!
}