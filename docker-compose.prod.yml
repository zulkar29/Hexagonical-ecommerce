version: '3.8'

services:
  # Reverse Proxy & SSL Termination
  caddy:
    image: caddy:2-alpine
    restart: unless-stopped
    container_name: ecommerce-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
    environment:
      - DOMAIN=${DOMAIN:-yourdomain.com}
      - ADMIN_SUBDOMAIN=${ADMIN_SUBDOMAIN:-admin}
    depends_on:
      - backend
      - storefront
      - admin-panel
    networks:
      - ecommerce-network

  # Backend API Server
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile.prod
    restart: unless-stopped
    container_name: ecommerce-backend
    environment:
      - GIN_MODE=release
      - PORT=8080
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - DB_NAME=${POSTGRES_DB}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=${JWT_SECRET}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - BKASH_APP_KEY=${BKASH_APP_KEY}
      - BKASH_APP_SECRET=${BKASH_APP_SECRET}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USERNAME=${SMTP_USERNAME}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./uploads:/app/uploads
    networks:
      - ecommerce-network

  # Customer Storefront (Next.js)
  storefront:
    build: 
      context: ./storefront
      dockerfile: Dockerfile.prod
    restart: unless-stopped
    container_name: ecommerce-storefront
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=https://${DOMAIN:-yourdomain.com}/api
      - NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=${STRIPE_PUBLISHABLE_KEY}
    depends_on:
      - backend
    networks:
      - ecommerce-network

  # Admin Panel (React + Vite)
  admin-panel:
    build: 
      context: ./sass-admin-panel
      dockerfile: Dockerfile.prod
    restart: unless-stopped
    container_name: ecommerce-admin
    environment:
      - NODE_ENV=production
      - VITE_API_URL=https://${DOMAIN:-yourdomain.com}/api
    depends_on:
      - backend
    networks:
      - ecommerce-network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    container_name: ecommerce-postgres
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/migrations:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ecommerce-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    container_name: ecommerce-redis
    command: redis-server --requirepass ${REDIS_PASSWORD}
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - ecommerce-network


volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  caddy_data:
    driver: local
  caddy_config:
    driver: local

networks:
  ecommerce-network:
    driver: bridge